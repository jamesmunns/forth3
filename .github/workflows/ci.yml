name: CI

on:
  pull_request:
  workflow_dispatch:
  push:
    branches: ["main"]

env:
  # disable incremental compilation.
  #
  # incremental compilation is useful as part of an edit-build-test-edit cycle,
  # as it lets the compiler avoid recompiling code that hasn't changed. however,
  # on CI, we're not making small edits; we're almost always building the entire
  # project from scratch. thus, incremental compilation on CI actually
  # introduces *additional* overhead to support making future builds
  # faster...but no future builds will ever occur in any given CI environment.
  #
  # see https://matklad.github.io/2021/09/04/fast-rust-builds.html#ci-workflow
  # for details.
  CARGO_INCREMENTAL: 0
  # allow more retries for network requests in cargo (downloading crates) and
  # rustup (installing toolchains). this should help to reduce flaky CI failures
  # from transient network timeouts or other issues.
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  # don't emit giant backtraces in the CI logs.
  RUST_BACKTRACE: short
  # Ask miri for strict provenance
  MIRIFLAGS: -Zmiri-strict-provenance

jobs:
  changed_paths:
    continue-on-error: true # Uncomment once integration is finished
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
      paths_result: ${{ steps.skip_check.outputs.paths_result }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          do_not_skip: '["workflow_dispatch", "push"]'
          paths_ignore: '["**/README.md"]'
          paths_filter: |
            forth3:
              paths:
                - 'src/*.rs'
                - 'Cargo.toml'
                - '.github/workflows/ci.yml'
            f3repl:
              paths:
                - 'f3repl/**/*.rs'
                - 'f3repl/Cargo.toml'
                - '.github/workflows/ci.yml'
            forthboy:
              paths:
                - 'forthboy/**/*.rs'
                - 'forthboy/Cargo.toml'
                - '.github/workflows/ci.yml'

  # run `cargo check` with the host target triple.
  check-host:
    name: cargo check (host)
    needs: changed_paths
    if: needs.changed_paths.outputs.should_skip != 'true'
    runs-on: ubuntu-latest
    steps:
    - name: install rust toolchain
      run: rustup show
    - uses: olix0r/cargo-action-fmt@ee1ef42932e44794821dab57ef1bf7a73df8b21f
    - uses: actions/checkout@v3
    - name: run cargo check (debug)
      run: |
        cargo check \
          --workspace \
          --all-features \
          --quiet \
          --message-format=json |
          cargo-action-fmt
    - name: run cargo check (release)
      run: |
        cargo check \
          --workspace \
          --release \
          --all-features \
          --quiet \
          --message-format=json |
          cargo-action-fmt

  # TODO(AJM): Disabled until we clean up any current unclean formatting
  #
  # # check code style with `rustfmt`
  # rustfmt:
  #   needs: changed_paths
  #   if: needs.changed_paths.outputs.should_skip != 'true'
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: install rust toolchain
  #     run: rustup show
  #   - uses: actions/checkout@v3
  #   - uses: olix0r/cargo-action-fmt@ee1ef42932e44794821dab57ef1bf7a73df8b21f
  #   - name: run rustfmt
  #     run: cargo fmt --check --message-format=json | cargo-action-fmt

  # TODO(AJM): Disabled until we clean up any current unclean clippy lints
  #
  # # are there any annoying clippy lints we ought to clean up?
  # clippy:
  #   needs: changed_paths
  #   if: needs.changed_paths.outputs.should_skip != 'true'
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: install rust toolchain
  #     run: rustup show
  #   - uses: actions/checkout@v3
  #   - name: install Just
  #     uses: extractions/setup-just@v1
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #   - uses: olix0r/cargo-action-fmt@ee1ef42932e44794821dab57ef1bf7a73df8b21f
  #   - name: cargo clippy
  #     run: just clippy


  # run host tests
  test-host:
    runs-on: ubuntu-latest
    name: cargo test (host)
    needs: changed_paths
    if: needs.changed_paths.outputs.should_skip != 'true'
    steps:
    - name: install rust toolchain
      run: rustup show
    - uses: actions/checkout@v3
    - name: cargo test (all crates)
      run: cargo test --workspace --all-features

  # (just forth3) - run miri tests
  test-host-miri:
    runs-on: ubuntu-latest
    name: cargo miri test (host)
    needs: changed_paths
    if: needs.changed_paths.outputs.should_skip != 'true'
    steps:
    - name: install rust toolchain
      run: rustup show
    - uses: actions/checkout@v3
    - name: cargo miri test (forth3)
      run: cargo +nightly miri test --all-features

  # check that RustDoc builds
  docs:
    needs: changed_paths
    if: needs.changed_paths.outputs.should_skip != 'true'
    runs-on: ubuntu-latest
    steps:
    - name: install rust toolchain
      run: rustup show
    - uses: actions/checkout@v3
    - name: run rustdoc
      run: cargo doc --workspace --all-features
